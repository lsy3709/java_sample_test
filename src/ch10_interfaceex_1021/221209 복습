
추상클래스 
: 추상 메서드를 가지고 있다면,
추상(막연하다 , 구체적이지 않다.) vs 구체적인
abstract 
!
추상클래스를 상속 받는다면 : 
자식 클래스는 뭔가 특징있다. 
1) 추상메서드를 구체적으로 재정의
2) 자기가 추상 클래스가 되거나. 
!
상속 -> 재사용. -> 단일 상속만 가능. 
is A 관계 . 사람은 동물이다. , 사람은 포유류이다. 
상속이 안된다면, 포함 관계 has A 관계를 사용한다. 많이 씀. 
예) A 클래스에 B 클래스를 가져와서 사용한다. 
클래스를 사용한다고 하면 -> 객체를 사용합니다. 
!
Person p1;
p1 = new Person();
!
다형성 
부모 형으로 받는다. (부모를 상속한 모든 자식들은 부모형으로 선언가능.)
인터페이스도 마찬가지.
인터페이스를 구현한 하위의 모든 클래스들은 그 인터페이스 형으로 선언 가능. 
!
추상클래스 
-> 직접 객체 생성도 안되고, 하지만, 개발 설계 모델 클래스처럼 사용함. 
-> 추상 메서드는 강제성( 막연한 메서드 바로 사용못함.) , 그래서 재정의가 필요함. 

인터페이스 -> 메서드 색인(목차), 유연성, 확장성 , 다중 구현, 분업화
기본 구성 : 상수, 추상메서드 
추가로, 디폴트 메서드, private 메서드 추가( 일반메서드)
!